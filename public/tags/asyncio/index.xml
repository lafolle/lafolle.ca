<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asyncio on The Knife of Phaedrus</title>
    <link>https://lafolle.ca/tags/asyncio/</link>
    <description>Recent content in asyncio on The Knife of Phaedrus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Karan Chaudhary</copyright>
    <lastBuildDate>Wed, 16 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lafolle.ca/tags/asyncio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On asyncio class hierarchy</title>
      <link>https://lafolle.ca/blog/on-asyncio-class-hierarchy/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lafolle.ca/blog/on-asyncio-class-hierarchy/</guid>
      <description>_UnixSelectorEventLoop is used as a _loop_factory. That is, it is used to create new event loops in unix based system.
What does it look like?
class _UnixSelectorEventLoop(selector_events.BaseSelectorEventLoop) It is a subclass of BaseSelectorEventLoop. Rather than going into the details of the unix selector, i&amp;rsquo;ll first dive into the base class.
class BaseSelectorEventLoop(base_events.BaseEventLoop) And it inherits from BaseEventLoop.
class BaseEventLoop(events.AbstractEventLoop) And it inherits from AbstractEventLoop. I&amp;rsquo;m glad that this is the end to the inheritance hierarchy.</description>
    </item>
    
    <item>
      <title>On asyncio run</title>
      <link>https://lafolle.ca/blog/on-asyncio-run/</link>
      <pubDate>Thu, 10 Mar 2022 22:08:29 -0800</pubDate>
      
      <guid>https://lafolle.ca/blog/on-asyncio-run/</guid>
      <description>Python formally introduced concurrency using asncio in 3.7+. A simple program that can demonstrate the hello world of async stuff goes like this-
import asyncio async def main(): print(&amp;#39;hello&amp;#39;) await asyncio.sleep(1) print(&amp;#39;world&amp;#39;) asyncio.run(main()) In this case asyncio.run is the blocking call. It takes coroutine as a param, that is created by main() due to the async qualifer.
Does it also create an event loop inside? From the doc, yes it does-</description>
    </item>
    
  </channel>
</rss>
